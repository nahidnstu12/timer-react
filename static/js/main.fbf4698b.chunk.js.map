{"version":3,"sources":["todoStack/components/ListViews/listItem.jsx","todoStack/components/ListViews/index.jsx","todoStack/components/TableViews/tblItem.jsx","todoStack/components/TableViews/index.jsx","todoStack/Controller/search.panel.js","todoStack/Controller/filter-controller.js","todoStack/Controller/view-controller.js","todoStack/Controller/bulk-controller.js","todoStack/Controller/index.js","todoStack/components/todos/createForm.js","todoStack/components/todos/index.jsx","todoStack/app.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","todo","toggleSelect","toggleComplete","ListGroupItem","className","CustomInput","type","id","checked","isSelect","onChange","text","time","toDateString","Button","color","isComplete","onClick","ListView","todos","ListGroup","map","key","RowItem","scope","TableView","Table","SearchPanel","term","handleSearch","toggleForm","Input","placeholder","value","e","target","FilterController","handleFilter","ButtonGroup","ViewController","changeView","view","Label","for","name","BulkController","clearSelected","clearCompleted","reset","Controller","Row","Col","md","size","CreateTodoForm","state","description","handleChange","evt","setState","handleSubmit","preventDefault","props","createTodo","Form","onSubmit","this","FormGroup","Component","Todos","Date","isOpenForm","filter","find","t","val","shortid","generate","getView","performSearch","performFilter","toLowerCase","includes","Modal","toggle","isOpen","ModalHeader","ModalBody","StackTodos","Container","library","add","faTrash","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbf4698b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {ListGroupItem,CustomInput,Button} from 'reactstrap'\r\n\r\n\r\nconst ListItem =({todo,toggleSelect,toggleComplete}) => {\r\n    return(\r\n            <ListGroupItem className = 'd-flex align-items-center'>\r\n                 <CustomInput \r\n                 type='checkbox'\r\n                 id={todo.id}\r\n                 checked={todo.isSelect}\r\n                 onChange={()=>toggleSelect(todo.id)}\r\n                />\r\n                <div className='mx-3'>\r\n                     <h4>{todo.text}</h4>\r\n                     <p>{todo.time.toDateString()}</p>\r\n                </div>\r\n                <Button\r\n                 className='ml-auto'\r\n                 color={todo.isComplete ? 'danger' : 'success'}\r\n                 onClick={()=>toggleComplete(todo.id)}\r\n                >\r\n                {todo.isComplete ? 'Completed' : 'Running'}\r\n                </Button>\r\n            </ListGroupItem>\r\n         )\r\n}\r\n    \r\n\r\n\r\nListItem.propTypes={\r\n    todo : PropTypes.object.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired\r\n    }\r\n    \r\n\r\nexport default ListItem\r\n","import React from 'react'\r\nimport {ListGroup} from 'reactstrap'\r\nimport ListItem from './listItem'\r\nimport  PropTypes  from 'prop-types'\r\n\r\nconst ListView =({todos,toggleSelect,toggleComplete})=>(\r\n        <ListGroup>\r\n            {todos.map(todo =>(\r\n                <ListItem\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    toggleSelect={toggleSelect}\r\n                    toggleComplete ={toggleComplete}\r\n                />\r\n            ))}\r\n        </ListGroup>\r\n)\r\n\r\n\r\nListView.propTypes ={\r\n    todos : PropTypes.array.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired\r\n    }\r\n    \r\n\r\nexport default ListView\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {CustomInput,Button} from 'reactstrap'\r\n\r\nconst RowItem = ({todo,toggleSelect,toggleComplete}) => {\r\n    return (\r\n        <tr>\r\n        <th scope='row'>\r\n            <CustomInput \r\n                 type='checkbox'\r\n                 id={todo.id}\r\n                 checked={todo.isSelect}\r\n                 onChange={()=>toggleSelect(todo.id)}\r\n             />\r\n        </th>\r\n        <th>{todo.text}</th>\r\n        <th>{todo.time.toDateString()}</th>\r\n        <th>\r\n        <Button\r\n            className='ml-auto'\r\n            color={todo.isComplete ? 'danger' : 'success'}\r\n            onClick={()=>toggleComplete(todo.id)}\r\n            >\r\n            {todo.isComplete ? 'Completed' : 'Running'}\r\n        </Button>\r\n        </th>\r\n        </tr>\r\n    )\r\n}\r\n\r\nRowItem.propTypes = {\r\n    todo : PropTypes.object.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired\r\n}\r\n\r\nexport default RowItem\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Table} from 'reactstrap'\r\nimport RowItem from './tblItem'\r\n\r\nconst TableView = ({todos,toggleSelect,toggleComplete}) => (   \r\n       <Table>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Todo</th>\r\n                <th>Time</th>\r\n                <th>Action</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>       \r\n            {todos.map(todo =>(\r\n                <RowItem\r\n                key={todo.id}\r\n                todo={todo}\r\n                toggleSelect={toggleSelect}\r\n                toggleComplete ={toggleComplete}\r\n                /> \r\n            ))}\r\n        \r\n        </tbody>\r\n       </Table>\r\n    );\r\n\r\n\r\nTableView.propTypes = {\r\n    todos : PropTypes.array.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired\r\n}\r\n\r\nexport default TableView\r\n","import React from 'react'\r\nimport {Input,Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst SearchPanel = ({term,handleSearch,toggleForm}) =>  (\r\n        <div className='d-flex'>\r\n            <Input \r\n                placeholder='Search Term'\r\n                className='mr-3'\r\n                value={term}\r\n                onChange={e=>handleSearch(e.target.value)}\r\n            />\r\n            <Button color='success' onClick={toggleForm}>New</Button>\r\n        </div>\r\n)\r\n\r\n    SearchPanel.propTypes={\r\n        term : PropTypes.string.isRequired,\r\n        handleSearch:PropTypes.func.isRequired,\r\n        toggleForm :PropTypes.func.isRequired\r\n    }\r\n    \r\nexport default SearchPanel\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Button,ButtonGroup} from 'reactstrap'\r\n\r\nconst FilterController = ({handleFilter}) => {\r\n    return (\r\n        <ButtonGroup>\r\n            <Button onClick={()=>handleFilter('all')}>All</Button>\r\n            <Button onClick={()=>handleFilter('running')}>Running</Button>\r\n            <Button onClick={()=>handleFilter('completed')}>Completed</Button>\r\n        </ButtonGroup>\r\n    )\r\n}\r\n\r\nFilterController.propTypes = {\r\n    handleFilter : PropTypes.func.isRequired\r\n}\r\n\r\nexport default FilterController\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {CustomInput,Label} from 'reactstrap'\r\n\r\nconst ViewController = ({changeView,view}) => {\r\n    return (\r\n        <div className='d-flex'>\r\n            <Label for='list-view' className='mr-4'>\r\n                <CustomInput\r\n                className = 'd-inline-block'\r\n                id='list-view'\r\n                type='radio'\r\n                name='view'\r\n                value='list'\r\n                onChange={changeView}\r\n                checked={view==='list'}\r\n                />\r\n                 ListView\r\n            </Label>\r\n            <Label for='table-view' className='mr-4'>\r\n                <CustomInput\r\n                className = 'd-inline-block'\r\n                id='table-view'\r\n                type='radio'\r\n                name='view'\r\n                value='table'\r\n                onChange={changeView}\r\n                checked={view==='table'}\r\n                />\r\n                TableView\r\n            </Label>\r\n        </div>\r\n    )\r\n}\r\n\r\nViewController.propTypes = {\r\n    changeView : PropTypes.func.isRequired,\r\n    view : PropTypes.string.isRequired\r\n\r\n}\r\n\r\nexport default ViewController","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Button,ButtonGroup} from 'reactstrap'\r\n\r\nconst BulkController = ({clearSelected,clearCompleted,reset}) => {\r\n    return (\r\n        <ButtonGroup>\r\n            <Button color ='danger' onClick={clearSelected}>ClearSelected</Button>\r\n            <Button color ='danger' onClick={clearCompleted}>ClearCompleted</Button>\r\n            <Button color ='danger' onClick={reset}>Reset</Button>\r\n        </ButtonGroup>\r\n    )\r\n}\r\n\r\nBulkController.propTypes = {\r\n    clearSelected : PropTypes.func.isRequired,\r\n    clearCompleted : PropTypes.func.isRequired,\r\n    reset : PropTypes.func.isRequired\r\n}\r\n\r\nexport default BulkController\r\n","import React from 'react'\r\nimport SearchPanel from './search.panel'\r\nimport FilterController from './filter-controller'\r\nimport ViewController from './view-controller'\r\nimport BulkController from './bulk-controller'\r\nimport PropTypes from 'prop-types'\r\nimport {Row,Col} from 'reactstrap'\r\n\r\nconst Controller = ({term,handleSearch,toggleForm,handleFilter,changeView,view,clearCompleted,clearSelected,reset}) => {\r\n    return (\r\n        <div>\r\n            <SearchPanel \r\n                term ={term}\r\n                handleSearch={handleSearch}\r\n                toggleForm={toggleForm}\r\n            />\r\n            <Row className='my-4'>\r\n                <Col md={{size : 4}}>\r\n                    <FilterController handleFilter={handleFilter}/>\r\n                </Col>\r\n                <Col md={{size : 4}}>\r\n                    <ViewController changeView={changeView} view={view}/>\r\n                </Col>\r\n                <Col md={{size : 4}} className='d-flex'>\r\n                    <div className='ml-auto'>\r\n                        <BulkController \r\n                        clearSelected={clearSelected}\r\n                        clearCompleted ={clearCompleted}\r\n                        reset = {reset}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nController.propTypes ={\r\n    term : PropTypes.string.isRequired,\r\n    handleSearch:PropTypes.func.isRequired,\r\n    toggleForm :PropTypes.func.isRequired,\r\n    handleFilter:PropTypes.func.isRequired,\r\n    changeView : PropTypes.func.isRequired,\r\n    view : PropTypes.string.isRequired,\r\n    clearSelected : PropTypes.func.isRequired,\r\n    clearCompleted : PropTypes.func.isRequired,\r\n    reset : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Controller\r\n","import React, { Component } from 'react'\r\nimport {Form,FormGroup,Label,Input,Button} from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass CreateTodoForm extends Component {\r\n    state = {\r\n        text:'',\r\n        description:''\r\n    }\r\n    handleChange = evt =>{\r\n        this.setState({\r\n            [evt.target.name]:evt.target.value\r\n        })\r\n    }\r\n    handleSubmit = evt =>{\r\n        evt.preventDefault()\r\n        this.props.createTodo(this.state)\r\n        evt.target.reset()\r\n        this.setState({text:'',description:''})\r\n    }\r\n    render() {\r\n        return (\r\n           <Form onSubmit={this.handleSubmit}>\r\n               <FormGroup>\r\n                <Label>Enter task</Label>\r\n                <Input \r\n                    placeholder='Write Something'\r\n                    name='text'\r\n                    value={this.state.text}\r\n                    onChange={this.handleChange}\r\n                />\r\n               </FormGroup>\r\n               <FormGroup>\r\n                <Label>Enter Description</Label>\r\n                <Input \r\n                    type ='textarea'\r\n                    placeholder='Write Description'\r\n                    name='description'\r\n                    value={this.state.description}\r\n                    onChange={this.handleChange}\r\n                />\r\n               </FormGroup>\r\n               <Button type='submit'>Create Task</Button>\r\n           </Form>\r\n        )\r\n    }\r\n}\r\n\r\nCreateTodoForm.propTypes = {\r\n    createTodo:PropTypes.func.isRequired\r\n}\r\n\r\nexport default CreateTodoForm\r\n","import React, { Component } from 'react'\r\nimport ListView from './../ListViews'\r\nimport TableView from './../TableViews'\r\nimport Controller from '../../Controller'\r\nimport CreateTodoForm from './createForm'\r\n\r\nimport {Modal,ModalBody,ModalHeader} from 'reactstrap'\r\nimport shortid from 'shortid'\r\n\r\n// import CreateTodoForm from './../todoForm'\r\n\r\nexport default class Todos extends Component {\r\n    state ={\r\n        todos:[\r\n            {\r\n            id:1,\r\n            text:'sample 1',\r\n            description:'',\r\n            time:new Date(),\r\n            isComplete:false,\r\n            isSelect:false\r\n            },\r\n            {\r\n                id:3,\r\n                text:'testing...',\r\n                description:'',\r\n                time:new Date(),\r\n                isComplete:false,\r\n                isSelect:false\r\n            },\r\n            {\r\n                id:4,\r\n                text:'Love ...',\r\n                description:'',\r\n                time:new Date(),\r\n                isComplete:false,\r\n                isSelect:false\r\n            },\r\n            {\r\n                id:2,\r\n                text:'new sample 2',\r\n                description:'',\r\n                time:new Date(),\r\n                isComplete:false,\r\n                isSelect:false\r\n            }\r\n        ],\r\n        isOpenForm : false,\r\n        term:'',\r\n        view : 'list',\r\n        filter:'all',\r\n    }\r\n    toggleComplete= id =>{\r\n        const todos = [...this.state.todos]\r\n        const todo = todos.find(t => t.id===id)\r\n        todo.isComplete = !todo.isComplete\r\n        \r\n        this.setState({todos})\r\n    }\r\n    toggleSelect= id =>{\r\n        const todos = [...this.state.todos]\r\n        const todo = todos.find(t => t.id===id)\r\n        todo.isSelect = !todo.isSelect\r\n       \r\n        this.setState({todos})\r\n    }\r\n    handleSearch = val =>{\r\n        this.setState({\r\n            term:val\r\n        })\r\n    }\r\n    toggleForm = ()=>{\r\n        this.setState({\r\n            isOpenForm :!this.state.isOpenForm\r\n        })\r\n    }\r\n    createTodo = (todo) =>{\r\n        todo.id = shortid.generate()\r\n        todo.time = new Date()\r\n        todo.isComplete = false\r\n        todo.isSelect = false\r\n\r\n        const todos = [todo,...this.state.todos]\r\n        this.setState({todos})\r\n        this.toggleForm()\r\n    }\r\n    changeView = evt =>{\r\n        this.setState({\r\n            view : evt.target.value\r\n        })\r\n    }\r\n    handleFilter = val =>{\r\n        this.setState({filter : val})\r\n    }\r\n    clearSelected = () =>{\r\n        const todos = this.state.todos.filter(todo => !todo.isSelect)\r\n        this.setState({todos})\r\n    }\r\n    clearCompleted = () =>{\r\n        const todos = this.state.todos.filter(todo =>!todo.isComplete)\r\n        this.setState({todos})\r\n    }\r\n    reset = () =>{\r\n        // const todos = this.state.todos\r\n        this.setState({\r\n            isOpenForm : false,\r\n            term:'',\r\n            view : 'list',\r\n            filter:'all',\r\n\r\n        })\r\n    }\r\n    getView = () =>{\r\n        let todos = this.performSearch()\r\n        todos=this.performFilter(todos)\r\n        return this.state.view === 'list' ? (\r\n            <ListView \r\n                    todos={todos} \r\n                    toggleSelect={this.toggleSelect} \r\n                    toggleComplete={this.toggleComplete}\r\n            />\r\n        ):(\r\n            <TableView \r\n            todos={todos}\r\n            toggleSelect={this.toggleSelect} \r\n            toggleComplete={this.toggleComplete}\r\n            />\r\n        )\r\n    }\r\n    performSearch = () =>{\r\n        return this.state.todos.filter(todo => todo.text.toLowerCase().includes(this.state.term.toLowerCase())\r\n        )\r\n    }\r\n    performFilter = todos =>{\r\n        const {filter} = this.state\r\n        if(filter === 'completed'){\r\n            return todos.filter(todo => todo.isComplete) \r\n        }else if(filter === 'running'){\r\n            return todos.filter(todo => !todo.isComplete)\r\n        }else{\r\n            return todos\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className ='dispaly-4 text-center mb-5 '>Stack todo</h1> \r\n                <Controller \r\n                    term = {this.state.term}\r\n                    toggleForm = {this.toggleForm}\r\n                    handleSearch= {this.handleSearch}\r\n                    view = {this.state.view}\r\n                    handleFilter={this.handleFilter}\r\n                    changeView = {this.changeView}\r\n                    clearCompleted = {this.clearCompleted}\r\n                    clearSelected = {this.clearSelected}\r\n                    reset = {this.reset}\r\n                />\r\n                <div>\r\n                 {this.getView()} \r\n                </div>\r\n                <div>\r\n                    <Modal toggle={this.toggleForm} isOpen = {this.state.isOpenForm}>\r\n                        <ModalHeader toggle={this.toggleForm} >\r\n                            Create New Todo\r\n                        </ModalHeader>\r\n                        <ModalBody>\r\n                            <CreateTodoForm createTodo = {this.createTodo}/>\r\n                        </ModalBody>\r\n\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//  Todos\r\n","import React from 'react'\r\nimport {Container,Row,Col} from 'reactstrap'\r\nimport Todos from './components/todos'\r\n\r\nconst StackTodos= () =>{\r\n    \r\n    // render(){\r\n        return (\r\n        <Container className='my-3'>\r\n            <Row>\r\n                <Col>\r\n                    <Todos />  \r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        )\r\n}\r\n// }\r\n\r\nexport default StackTodos\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\n// import Todo from './todoList';\n// import Timer from './timer';\n// import Game from './TicTackToe/game'\nimport StackTodos from './todoStack/app'\n\nlibrary.add(faTrash)\n\nclass App extends Component{\n\nrender(){\n  return (\n    <div className=\"App\">\n      \n     {/* <Timer/> */}\n    \n     {/* <Todo/> */}\n\n     {/* <Game /> */}\n\n     <StackTodos />\n\n    </div>\n  )\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}