{"version":3,"sources":["todoList/ListItems.js","todoList/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","updateItem","target","icon","onClick","deleteItem","duration","easing","Todo","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItm","newItems","filteredItm","filter","it","onSubmit","placeholder","Component","library","add","faTrash","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6WA6BeA,MAzBf,SAAmBC,GAEf,IAGMC,EAHQD,EAAME,MAGIC,KAAI,SAAAC,GAExB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC/B,2BACA,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAAKZ,EAAMa,WAAWT,EAAKE,IAAIM,EAAEE,OAAOL,UACtG,8BACI,kBAAC,IAAD,CAAiBJ,UAAU,UAAUU,KAAK,QAAQC,QAAS,kBAAIhB,EAAMiB,WAAWb,EAAKE,cAQrG,OAAO,6BACP,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAAelB,KCmDpCmB,E,4MAtEXC,MAAQ,CACJnB,MAAM,GACNoB,YAAa,CACTZ,KAAK,GACLJ,IAAI,K,EAGZiB,YAAc,EAAKA,YAAYC,KAAjB,gB,EACdC,QAAU,EAAKA,QAAQD,KAAb,gB,EACVP,WAAa,EAAKA,WAAWO,KAAhB,gB,EACbX,WAAa,EAAKA,WAAWW,KAAhB,gB,0DAEDZ,GACRc,KAAKC,SAAS,CACVL,YAAY,CACRZ,KAAKE,EAAEE,OAAOL,MACdH,IAAIsB,KAAKC,W,8BAIbjB,GACJA,EAAEkB,iBACF,IAAMC,EAASL,KAAKL,MAAMC,YAE1B,GAAmB,KAAhBS,EAAOrB,KAAY,CAClB,IAAMsB,EAAQ,sBAAON,KAAKL,MAAMnB,OAAlB,CAAwB6B,IAEtCL,KAAKC,SAAS,CACVzB,MAAM8B,EACNV,YAAY,CACRZ,KAAK,GACLJ,IAAI,S,iCAKTA,GACP,IAAM2B,EAAcP,KAAKL,MAAMnB,MAAMgC,QAAO,SAAAC,GAAE,OAAIA,EAAG7B,MAAMA,KAC3DoB,KAAKC,SAAS,CACVzB,MAAM+B,M,iCAGH3B,EAAII,GAEX,IAAMR,EAAQwB,KAAKL,MAAMnB,MACzBA,EAAMC,KAAI,SAAAgC,GAIN,OAAQA,EAAG7B,MAAQA,EAAM6B,EAAGzB,KAAKA,EAAK,MAE1CgB,KAAKC,SAAS,CACVzB,MAAMA,M,+BAIV,OACA,yBAAKG,UAAU,aACX,gCACA,0BAAMG,GAAG,aAAa4B,SAAUV,KAAKD,SACrC,2BAAOlB,KAAK,OAAO8B,YAAY,aAAa5B,MAAOiB,KAAKL,MAAMC,YAAYZ,KAAMC,SAAUe,KAAKH,cAC/F,4BAAQhB,KAAK,UAAb,QAEA,kBAAC,EAAD,CAAWL,MAAOwB,KAAKL,MAAMnB,MAAOe,WAAYS,KAAKT,WAAYJ,WAAYa,KAAKb,mB,GAhE3EyB,a,eCEnBC,IAAQC,IAAIC,K,IAiBGC,E,uKAZb,OACE,yBAAKrC,UAAU,OAId,kBAAC,EAAD,W,GATaiC,aCKEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c0b78a82.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.style.css'\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\nfunction ListItems(props){\r\n    \r\n    const items = props.items;\r\n    // console.log(props.items)\r\n    // if(props.items){\r\n    const listItems = items.map(item =>\r\n   {\r\n        return <div className=\"list\" key={item.key}>\r\n                <p>\r\n                <input type='text' id={item.key} value={item.text} onChange={(e)=>{props.updateItem(item.key,e.target.value)}}/>\r\n                <span>\r\n                    <FontAwesomeIcon className='faicons' icon='trash' onClick={()=>props.deleteItem(item.key)}></FontAwesomeIcon>\r\n                </span>\r\n                \r\n                </p>\r\n              </div> \r\n\r\n    })    \r\n// }   \r\n    return <div>\r\n    <FlipMove duration={400} easing='ease-in-out'>{listItems}</FlipMove>\r\n        \r\n    </div>;\r\n}\r\n\r\nexport default ListItems","import React, { Component } from 'react'\r\nimport './todo.style.css'\r\nimport ListItems from './ListItems'\r\n\r\nclass Todo extends Component{\r\n    state = {\r\n        items:[],\r\n        currentItem :{\r\n            text:'',\r\n            key:''\r\n        }\r\n    }\r\n    handleInput = this.handleInput.bind(this)\r\n    addItem = this.addItem.bind(this)\r\n    deleteItem = this.deleteItem.bind(this)\r\n    updateItem = this.updateItem.bind(this)\r\n\r\n    handleInput(e){\r\n        this.setState({\r\n            currentItem:{\r\n                text:e.target.value,\r\n                key:Date.now()\r\n            }\r\n        })\r\n    }\r\n    addItem(e){\r\n        e.preventDefault()\r\n        const newItm = this.state.currentItem\r\n        // console.log(newItm)\r\n        if(newItm.text !== ''){\r\n            const newItems = [...this.state.items,newItm]\r\n            // console.log(newItems)\r\n            this.setState({\r\n                items:newItems,\r\n                currentItem:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })\r\n        }\r\n    }\r\n    deleteItem(key){\r\n        const filteredItm = this.state.items.filter(it => it.key!==key)\r\n        this.setState({\r\n            items:filteredItm\r\n        })\r\n    }\r\n    updateItem(key,text){\r\n        // console.log(`items:${this.state.items}`)\r\n        const items = this.state.items\r\n        items.map(it =>{\r\n            // if(it.key === key){\r\n            //     it.text = text\r\n            // }\r\n            return (it.key === key)? it.text=text:''\r\n        })\r\n        this.setState({\r\n            items:items\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n        <div className=\"Container\">\r\n            <header>\r\n            <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n            <input type=\"text\" placeholder=\"Enter task\" value={this.state.currentItem.text} onChange={this.handleInput}></input>\r\n            <button type=\"submit\" >Add</button>\r\n            </form>  \r\n            <ListItems items={this.state.items} deleteItem={this.deleteItem} updateItem={this.updateItem}/>     \r\n            </header>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo","import React,{Component} from 'react';\nimport './App.css';\nimport Todo from './todoList';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n// import Timer from './timer';\nlibrary.add(faTrash)\nclass App extends Component{\n  \n\nrender(){\n  return (\n    <div className=\"App\">\n      \n     {/* <Timer/> */}\n    \n     <Todo/>\n\n    </div>\n  )\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}